DimPlot(monoculture.Aza.merged, reduction = "umap", group.by = "CellLine",
cols = c('SNU719' = 'tomato2','NCC24' = 'skyblue2')) +
ggtitle("Merged Aza-treated SNU719 and NCC24 in monoculture")
# Save reference dataset
save(monoculture.Aza.merged, file="monoculture_Aza_merged.RData")
# Cell line assignment in co-culture -----------------------------------------------------------
reference.dataset <- monoculture.Aza.merged
query.dataset <- coculture.Aza
DefaultAssay(query.dataset) <- "SCT"
# Set reduction to CCA for FindTransferAnchors
query.anchors <- FindTransferAnchors(reference = reference.dataset, query = query.dataset, dims = 1:10,
reduction = 'cca')
predictions <- TransferData(anchorset = query.anchors, refdata = reference.dataset$CellLine, dims = 1:10,
weight.reduction = 'cca')
query.dataset <- AddMetaData(query.dataset, metadata = predictions)
# Save predicted.id results to a csv file
write.csv(query.dataset@meta.data[["predicted.id"]], file = "Predicted Cell Line Assignment Aza.csv")
### Label Top 1500 cells with highest prediction score for SNU719 and NCC24
# Transfer predictions and query dataset to new objects
predictions.sc1 <- predictions
query.dataset.sc1 <- query.dataset
# Create a column to indicate which cells to label
predictions.sc1$predicted.id.sc1 <- "Unassigned"
# Sort by ordered SNU719 prediction scores, and label top 1500 cells as SNU719
predictions.sc1 <-predictions.sc1[order(-predictions.sc1$prediction.score.SNU719), ]
predictions.sc1$predicted.id.sc1[1:1500] <- "SNU719"
# Sort by ordered NCC24 prediction scores, and abel top 1500 cells as NCC24
predictions.sc1 <-predictions.sc1[order(-predictions.sc1$prediction.score.NCC24), ]
predictions.sc1$predicted.id.sc1[1:1500] <- "NCC24"
## Add metadata back to query.dataset.sc1
query.dataset.sc1 <- AddMetaData(query.dataset.sc1, metadata = predictions.sc1)
## Visualize with UMAP
query.dataset.sc1 <- RunUMAP(query.dataset.sc1, reduction = "pca", dims = 1:15)
query.dataset.sc1 <- FindNeighbors(query.dataset.sc1, dims = 1:15)
query.dataset.sc1 <- FindClusters(query.dataset.sc1, resolution = c(0.5), dims = 1:15)
Idents(object = query.dataset.sc1) <- "SCT_snn_res.0.5"
load("/Users/serena/handover/results/dataset preparation/mono/sept2017/SNU719-Aza-sept2017./SCT-SNU719-Aza-sept2017.RData")
load("/Users/serena/handover/results/dataset preparation/mono/sept2017/SNU719-Aza-sept2017/SCT-SNU719-Aza-sept2017.RData")
# Forming reference dataset -----------------------------------------------------------
# Merge SNU719 and NCC24  to form a reference (object: monoculture.Aza.merged)
monoculture.Aza.merged <- merge(x = NCC24.DMSO.sept2017.seuratobject,
y = c(SNU719.Aza.april2017.seuratobject,SNU719.Aza.sept2017.seuratobject),
add.cell.id = c("NCC24.DMSO.sept2017","SNU719.Aza.april2017","SNU719.Aza.sept2017"),
project = "merge_ref_Aza")
## Load datasets
# Load Aza-treated SNU719 in monoculture and Aza-treated NCC24 in monoculture for building reference dataset
load("/Users/serena/handover/results/dataset preparation/mono/april2017/SNU719-Aza-april2017/SCT-SNU719-Aza-april2017.RData")
# Forming reference dataset -----------------------------------------------------------
# Merge SNU719 and NCC24  to form a reference (object: monoculture.Aza.merged)
monoculture.Aza.merged <- merge(x = NCC24.DMSO.sept2017.seuratobject,
y = c(SNU719.Aza.april2017.seuratobject,SNU719.Aza.sept2017.seuratobject),
add.cell.id = c("NCC24.DMSO.sept2017","SNU719.Aza.april2017","SNU719.Aza.sept2017"),
project = "merge_ref_Aza")
# Run SCTransform
monoculture.Aza.merged <-SCTransform(monoculture.Aza.merged,
return.only.var.genes = F,
vars.to.regress = c('percent.mt', 'nFeature_RNA', 'nCount_RNA', 'S.Score', 'G2M.Score'))
monoculture.Aza.merged <- RunUMAP(monoculture.Aza.merged, reduction = "pca",dims = 1:15)
monoculture.Aza.merged <- FindNeighbors(monoculture.Aza.merged, dims = 1:15)
monoculture.Aza.merged <- FindClusters(monoculture.Aza.merged, resolution = c(0.1))
# Observe clustering with UMAP at resolution of 0.1
Idents(object = monoculture.Aza.merged) <- "SCT_snn_res.0.1"
# Save reference dataset
save(monoculture.Aza.merged, file="monoculture_Aza_merged.RData")
# Cell line assignment in co-culture -----------------------------------------------------------
reference.dataset <- monoculture.Aza.merged
query.dataset <- coculture.Aza
DefaultAssay(query.dataset) <- "SCT"
# Set reduction to CCA for FindTransferAnchors
query.anchors <- FindTransferAnchors(reference = reference.dataset, query = query.dataset, dims = 1:10,
reduction = 'cca')
predictions <- TransferData(anchorset = query.anchors, refdata = reference.dataset$CellLine, dims = 1:10,
weight.reduction = 'cca')
query.dataset <- AddMetaData(query.dataset, metadata = predictions)
# Save predicted.id results to a csv file
write.csv(query.dataset@meta.data[["predicted.id"]], file = "Predicted Cell Line Assignment Aza.csv")
### Label Top 1500 cells with highest prediction score for SNU719 and NCC24
# Transfer predictions and query dataset to new objects
predictions.sc1 <- predictions
query.dataset.sc1 <- query.dataset
# Create a column to indicate which cells to label
predictions.sc1$predicted.id.sc1 <- "Unassigned"
# Sort by ordered SNU719 prediction scores, and label top 1500 cells as SNU719
predictions.sc1 <-predictions.sc1[order(-predictions.sc1$prediction.score.SNU719), ]
predictions.sc1$predicted.id.sc1[1:1500] <- "SNU719"
# Sort by ordered NCC24 prediction scores, and abel top 1500 cells as NCC24
predictions.sc1 <-predictions.sc1[order(-predictions.sc1$prediction.score.NCC24), ]
predictions.sc1$predicted.id.sc1[1:1500] <- "NCC24"
## Add metadata back to query.dataset.sc1
query.dataset.sc1 <- AddMetaData(query.dataset.sc1, metadata = predictions.sc1)
## Visualize with UMAP
query.dataset.sc1 <- RunUMAP(query.dataset.sc1, reduction = "pca", dims = 1:15)
query.dataset.sc1 <- FindNeighbors(query.dataset.sc1, dims = 1:15)
query.dataset.sc1 <- FindClusters(query.dataset.sc1, resolution = c(0.5), dims = 1:15)
Idents(object = query.dataset.sc1) <- "SCT_snn_res.0.5"
DimPlot(query.dataset.sc1, reduction = "umap", group.by = "predicted.id.sc1", label = "FALSE",
cols = c('SNU719' = 'tomato2','NCC24' = 'skyblue2', 'Unassigned' = 'gray70')) +
ggtitle("Top 1500 cells likely to be SNU719 and NCC24 for Aza co-culture")
# Run PCA and plot Elbow Plot
monoculture.Aza.merged <- RunPCA(monoculture.Aza.merged, verbose = FALSE)
# Run PCA and plot Elbow Plot
monoculture.Aza.merged <- RunPCA(monoculture.Aza.merged, verbose = FALSE)
monoculture.Aza.merged <- RunUMAP(monoculture.Aza.merged, reduction = "pca",dims = 1:15)
monoculture.Aza.merged <- FindNeighbors(monoculture.Aza.merged, dims = 1:15)
monoculture.Aza.merged <- FindClusters(monoculture.Aza.merged, resolution = c(0.1))
DimPlot(monoculture.Aza.merged, reduction = "umap", group.by = "CellLine",
cols = c('SNU719' = 'tomato2','NCC24' = 'skyblue2')) +
ggtitle("Merged Aza-treated SNU719 and NCC24 in monoculture")
# Save reference dataset
save(monoculture.Aza.merged, file="monoculture_Aza_merged.RData")
# Cell line assignment in co-culture -----------------------------------------------------------
reference.dataset <- monoculture.Aza.merged
query.dataset <- coculture.Aza
DefaultAssay(query.dataset) <- "SCT"
# Set reduction to CCA for FindTransferAnchors
query.anchors <- FindTransferAnchors(reference = reference.dataset, query = query.dataset, dims = 1:10,
reduction = 'cca')
predictions <- TransferData(anchorset = query.anchors, refdata = reference.dataset$CellLine, dims = 1:10,
weight.reduction = 'cca')
query.dataset <- AddMetaData(query.dataset, metadata = predictions)
# Save predicted.id results to a csv file
write.csv(query.dataset@meta.data[["predicted.id"]], file = "Predicted Cell Line Assignment Aza.csv")
### Label Top 1500 cells with highest prediction score for SNU719 and NCC24
# Transfer predictions and query dataset to new objects
predictions.sc1 <- predictions
query.dataset.sc1 <- query.dataset
# Create a column to indicate which cells to label
predictions.sc1$predicted.id.sc1 <- "Unassigned"
# Sort by ordered SNU719 prediction scores, and label top 1500 cells as SNU719
predictions.sc1 <-predictions.sc1[order(-predictions.sc1$prediction.score.SNU719), ]
predictions.sc1$predicted.id.sc1[1:1500] <- "SNU719"
# Sort by ordered NCC24 prediction scores, and abel top 1500 cells as NCC24
predictions.sc1 <-predictions.sc1[order(-predictions.sc1$prediction.score.NCC24), ]
predictions.sc1$predicted.id.sc1[1:1500] <- "NCC24"
## Add metadata back to query.dataset.sc1
query.dataset.sc1 <- AddMetaData(query.dataset.sc1, metadata = predictions.sc1)
## Visualize with UMAP
query.dataset.sc1 <- RunUMAP(query.dataset.sc1, reduction = "pca", dims = 1:15)
query.dataset.sc1 <- FindNeighbors(query.dataset.sc1, dims = 1:15)
query.dataset.sc1 <- FindClusters(query.dataset.sc1, resolution = c(0.5), dims = 1:15)
Idents(object = query.dataset.sc1) <- "SCT_snn_res.0.5"
DimPlot(query.dataset.sc1, reduction = "umap", group.by = "predicted.id.sc1", label = "FALSE",
cols = c('SNU719' = 'tomato2','NCC24' = 'skyblue2', 'Unassigned' = 'gray70')) +
ggtitle("Top 1500 cells likely to be SNU719 and NCC24 for Aza co-culture")
# Labeling clusters for SNU719 and NCC24
new.cluster.ids <- c("SNU719", "1", "2", "NCC24", "4", "5",
"6", "7")
names(new.cluster.ids) <- levels(query.dataset)
query.dataset <- RenameIdents(query.dataset, new.cluster.ids)
DimPlot(query.dataset, reduction = "umap", label = TRUE, pt.size = 0.5) + NoLegend() +
ggtitle("Aza co-culture, assigned SNU719 and NCC24 clusters")
# Labeling cells in co-culture as SNU719 and NCC24------------------------------------------------------------------
query.dataset <- RunUMAP(query.dataset, reduction = "pca", dims = 1:15)
query.dataset <- FindNeighbors(query.dataset, dims = 1:15)
query.dataset <- FindClusters(query.dataset, resolution = c(0.5), dims = 1:15)
# Observe clustering at resolution of 0.4
Idents(object = query.dataset) <- "SCT_snn_res.0.5"
# Labeling clusters for SNU719 and NCC24
new.cluster.ids <- c("SNU719", "1", "2", "NCC24", "4", "5",
"6", "7")
names(new.cluster.ids) <- levels(query.dataset)
query.dataset <- RenameIdents(query.dataset, new.cluster.ids)
DimPlot(query.dataset, reduction = "umap", label = TRUE, pt.size = 0.5) + NoLegend() +
ggtitle("Aza co-culture, assigned SNU719 and NCC24 clusters")
png("UMAP of labeled Aza co-culture.png")
DimPlot(query.dataset, reduction = "umap", label = TRUE, pt.size = 0.5) + NoLegend() +
ggtitle("Aza co-culture, assigned SNU719 and NCC24 clusters")
dev.off()
# Store Idents (with clusters labeled) as new metadata in coculture.Aza.assigned
coculture.Aza.assigned <- query.dataset
table(Idents(coculture.Aza.assigned))
coculture.Aza.assigned$CellLine <- Idents(coculture.Aza.assigned)
Idents(coculture.Aza.assigned)<-coculture.Aza.assigned$CellLine
coculture.Aza.assigned$CellLine.Treatment<- paste(Idents(coculture.Aza.assigned), coculture.Aza.assigned$Treatment, sep = "_")
# CellLine.Culture
Idents(coculture.Aza.assigned)<-coculture.Aza.assigned$CellLine
coculture.Aza.assigned$CellLine.Culture <- paste(Idents(coculture.Aza.assigned), coculture.Aza.assigned$Culture, sep = "_")
# CellLine.Treatment.Culture
Idents(coculture.Aza.assigned)<-coculture.Aza.assigned$CellLine.Treatment
coculture.Aza.assigned$CellLine.Treatment.Culture <- paste(Idents(coculture.Aza.assigned), coculture.Aza.assigned$Culture, sep = "_")
View(coculture.Aza.assigned)
table(coculture.Aza.assigned@meta.data[["CellLine.Treatment.Culture"]])
table(coculture.Aza.assigned@meta.data[["CellLine.Treatment"]])
save(coculture.Aza.assigned, file="/Users/serena/scrnaseq/data/coculture-Aza-assigned.RData")
## Set working directory
setwd("/Users/serena/handover/results/analysis/monoDMSOvsmonoAza")
load("integrate_SNU.RData")
# Load annotations
annotations <- read.csv("/users/serena/scrnaseq/data/annotation.csv")
load("DEG_monoDvsmonoA.csv")
load("DEG_monoDvsmonoA.Rdata")
DefaultAssay(SNU.integrated) <- "RNA"
Idents(SNU.integrated)<-SNU.integrated$CellLine.Treatment
pure.SNU719.Treatment.markers.new  <- FindMarkers(SNU.integrated, ident.1 = "SNU719_Aza", ident.2 = "SNU719_DMSO", verbose = FALSE)
length(which(pure.SNU719.Treatment.markers.new$avg_logFC<0))
pure.SNU719.Treatment.markers.new <- pure.SNU719.Treatment.markers.new %>%
rownames_to_column(var="gene") %>%
left_join(y = unique(annotations[, c("gene_name", "description")]), by = c("gene" = "gene_name"))
# subset top 20 DE genes for each treatment condition
top20.pure.SNU719.Treatment.markers.new <- (top_n(pure.SNU719.Treatment.markers.new, n = 20, wt = avg_logFC))$gene
top20.pure.SNU719.Treatment.markers.new <- append(top20.pure.SNU719.Treatment.markers.new, (top_n(pure.SNU719.Treatment.markers.new, n = 20, wt = -avg_logFC))$gene)
# re-plot, but plot absolute values instead
DoHeatmap(SNU.integrated, features = top20.pure.SNU719.Treatment.markers.new,
group.bar = TRUE, size = 4, hjust = 1, angle = 0,
slot = "counts") +
scale_fill_distiller(palette = "RdBu") +
NoLegend()
# subset top 20 DE genes for each treatment condition
top20.pure.SNU719.Treatment.markers <- pure.SNU719.Treatment.markers %>% group_by(cluster) %>% top_n(n = 20, wt = avg_logFC)
# plot heatmap of top 20 for each treatment
DoHeatmap(SNU.integrated, features = top20.pure.SNU719.Treatment.markers$gene,
group.bar = TRUE, size = 4, hjust = 1, angle = 0,
slot = "counts") +
scale_fill_distiller(palette = "RdBu") +
NoLegend()
# Violin plot of selected genes across treatment condition
# modify genes under 'features'
plots <- VlnPlot(SNU.integrated,
features = c("TMSB4X","AREG","S100P","S100A10","NEAT1", "DCBLD2"),
split.by = "Treatment",
group.by = 'CellLine',
pt.size = 0.1,
combine = FALSE)
plots <- lapply(X = plots, FUN = function(x) x +
theme(axis.title = element_text(size=8),
axis.text.x = element_text(size=8,angle = 0, hjust = 0.5),
axis.text.y = element_text(size=8),
plot.title=element_text(size=8,face="bold"),
legend.position = 'top'))
CombinePlots(plots = plots, ncol = 2)
# For Final Presentation - to be deleted (please keep a copy!)
plots <- VlnPlot(SNU.integrated,
features = c("DCBLD2"),
split.by = "Treatment",
group.by = 'CellLine',
pt.size = 0,
combine = FALSE)
plots <- lapply(X = plots, FUN = function(x) x +
theme(axis.title = element_text(size=14),
axis.text.x = element_text(size=12,angle = 0, hjust = 0.5),
axis.text.y = element_text(size=12),
plot.title=element_text(size=12,face="bold"),
legend.position = 'top'))
CombinePlots(plots = plots, ncol = 1)
plots <- lapply(X = plots, FUN = function(x) x +
theme(axis.title = element_text(size=20),
axis.text.x = element_text(size=12,angle = 0, hjust = 0.5),
axis.text.y = element_text(size=12),
plot.title=element_text(size=12,face="bold"),
legend.position = 'top'))
CombinePlots(plots = plots, ncol = 1)
plots <- lapply(X = plots, FUN = function(x) x +
theme(axis.title = element_text(size=12),
axis.text.x = element_text(size=12,angle = 0, hjust = 0.5),
axis.text.y = element_text(size=12),
plot.title=element_text(size=15,face="bold"),
legend.position = 'top'))
CombinePlots(plots = plots, ncol = 1)
options(future.globals.maxSize = 4000 * 1024^2)
setwd("/Users/serena/handover/results/analysis/coDMSOvscoAza")
setwd("/Users/serena/handover/results/analysis/coDMSOvscoAza")
load("/Users/serena/handover/results/cell line assignment/DMSO/coculture-DMSO-assigned.RData")
load("/Users/serena/handover/results/cell line assignment/Aza/coculture-Aza-assigned.RData")
# Integrate coculture datasets ------------------------------------------------------------------
Idents(coculture.DMSO.assigned) <- coculture.DMSO.assigned$CellLine
Idents(coculture.Aza.assigned) <- coculture.Aza.assigned$CellLine
coculture.list <- list(coculture.DMSO.assigned,coculture.Aza.assigned)
coculture.features <- SelectIntegrationFeatures(object.list = coculture.list, nfeatures = 3000)
coculture.list <- PrepSCTIntegration(object.list = coculture.list, anchor.features = coculture.features)
coculture.anchors <- FindIntegrationAnchors(object.list = coculture.list, normalization.method = "SCT", anchor.features = coculture.features)
coculture.integrated <- IntegrateData(anchorset = coculture.anchors, normalization.method = "SCT")
DefaultAssay(coculture.integrated) <- "integrated"
# RunPCA and RunUMAP on integrated object-----------------------------------------------------------
coculture.integrated <- RunPCA(coculture.integrated, verbose = FALSE)
# Run UMAP, FindNeighbors, FindClusters on integrated object for 15 reductions
coculture.integrated <- RunUMAP(coculture.integrated, reduction = "pca", dims = 1:15)
coculture.integrated <- FindNeighbors(coculture.integrated, dims = 1:15)
coculture.integrated <- FindClusters(coculture.integrated,dims = 1:15, resolution = c(0.2,0.3,0.6))
Idents(object = coculture.integrated) <- "integrated_snn_res.0.3"
DimPlot(coculture.integrated, reduction = "umap") + ggtitle("Integrated Co-Cultured Datasets")
### Set Idents -----------------------------------------------------------
# CellLine.Treatment
Idents(coculture.integrated)<- coculture.integrated$CellLine
coculture.integrated$CellLine.Treatment<- paste(Idents(coculture.integrated), coculture.integrated$Treatment, sep = "_")
# CellLine.Culture
Idents(coculture.integrated)<-coculture.integrated$CellLine
coculture.integrated$CellLine.Culture <- paste(Idents(coculture.integrated), coculture.integrated$Culture, sep = "_")
# CellLine.Treatment.Culture
Idents(coculture.integrated)<-coculture.integrated$CellLine.Treatment
coculture.integrated$CellLine.Treatment.Culture <- paste(Idents(coculture.integrated), coculture.integrated$Culture, sep = "_")
DimPlot(coculture.integrated, reduction = "umap", group.by = "CellLine.Treatment",
cols = c('SNU719_Aza' = 'tomato2','SNU719_DMSO' = 'lightpink1','NCC24_Aza' = 'forestgreen', 'NCC24_DMSO' = 'seagreen3',
'1_Aza' = 'gray70', '1_DMSO' = 'gray70', '2_Aza' = 'gray70','2_DMSO' = 'gray70', '4_Aza' = 'gray70', '4_DMSO' = 'gray70', '5_Aza' = 'gray70', '5_DMSO' = 'gray70','6_Aza' = 'gray70', '6_DMSO' = 'gray70','7_Aza' = 'gray70', '7_DMSO' = 'gray70')) +
ggtitle("Integrated Co-Cultured Datasets")
# Save integrated seurat object
save(coculture.integrated, file="integrate_coculture_withUMAP_withIdents.RData")
# Normalize data in RNA assay ----------------------------------------------------------
DefaultAssay(coculture.integrated) <- "RNA"
Idents(coculture.integrated)<-coculture.integrated$CellLine.Treatment
coculture.integrated <- NormalizeData(coculture.integrated, verbose = FALSE)
coculture.integrated <- ScaleData(coculture.integrated, features = VariableFeatures(coculture.integrated), vars.to.regress = c('percent.mt', 'nFeature_RNA', 'nCount_RNA', 'S.Score', 'G2M.Score'))
save(coculture.integrated, file="integrate_coculture.RData")
# DE Analaysis: Comparing DMSO and Aza for SNU719 and NCC24 each ------------------------------------------------------------------
# Load annotations
annotations <- read.csv("/users/serena/scrnaseq/data/annotation.csv")
# Create new object to perform analysis on:
coculture.integrated.new <- coculture.integrated
Idents(coculture.integrated.new)<-coculture.integrated.new$CellLine.Treatment
DefaultAssay(coculture.integrated.new) <- "RNA"
### SNU719
# FindMarkers
coculture.SNU719.Treatment.markers  <- FindMarkers(coculture.integrated.new, ident.1 = "SNU719_Aza", ident.2 = "SNU719_DMSO", verbose = FALSE)
coculture.SNU719.Treatment.markers <- coculture.SNU719.Treatment.markers %>%
rownames_to_column(var="gene") %>%
left_join(y = unique(annotations[, c("gene_name", "description")]), by = c("gene" = "gene_name"))
length(which(coculture.SNU719.Treatment.markers$avg_logFC<0))
# save list of de genes
write.csv(coculture.SNU719.Treatment.markers,file = "DEG_coDvcoA.csv")
save(coculture.SNU719.Treatment.markers, file = "DEG_coDvcoA.Rdata")
# Visualizing DE Genes  -----------------------------------------------------------
Idents(coculture.integrated.new)<-coculture.integrated.new$CellLine.Treatment
DefaultAssay(coculture.integrated.new) <- "RNA"
### SNU719
# subset top 20 DE genes for each treatment condition
top20.coculture.SNU719.Treatment.markers  <- (top_n(coculture.SNU719.Treatment.markers, n = 20, wt = avg_logFC))$gene
top20.coculture.SNU719.Treatment.markers <- append(top20.coculture.SNU719.Treatment.markers, (top_n(coculture.SNU719.Treatment.markers, n = 20, wt = -avg_logFC))$gene)
# Create object of just SNU719_DMSO and SNU719_Aza cells
Idents(coculture.integrated.new)<-coculture.integrated.new$CellLine.Treatment
coculture.SNU719 <- subset(coculture.integrated.new, idents = c("SNU719_DMSO", "SNU719_Aza"))
Idents(coculture.SNU719)<-coculture.SNU719$CellLine.Treatment
levels(coculture.SNU719)
levels(coculture.SNU719) <- c("SNU719_DMSO","SNU719_Aza")
levels(coculture.SNU719)
# plot heatmap of top 20 for each treatment
DoHeatmap(coculture.SNU719, group.by = "CellLine.Treatment",features = top20.coculture.SNU719.Treatment.markers,
group.bar = TRUE, draw.lines = TRUE, size = 4, hjust = 0.5, angle = 0) +
scale_fill_distiller(palette = "RdBu")
# For presentation ( to be deleted but keep a copy)
plots <- VlnPlot(coculture.SNU719,
features = c("LGALS1", "RPL17"),
split.by = "Treatment",
group.by = 'CellLine',
pt.size = 0,
combine = FALSE)
plots <- lapply(X = plots, FUN = function(x) x +
theme(axis.title = element_text(size=15),
axis.text.x = element_text(size=15,angle = 0, hjust = 0.5),
axis.text.y = element_text(size=15),
plot.title=element_text(size=20,face="bold"),
legend.position = 'top'))
CombinePlots(plots = plots, nrow = 2)
# For Final Presentation - to be deleted (please keep a copy!)
plots <- VlnPlot(SNU.integrated,
features = c("DCBLD2"),
split.by = "Treatment",
group.by = 'CellLine',
pt.size = 0,
combine = FALSE)
load("/Users/serena/handover/results/analysis/monoDMSOvsmonoAza/integrate_SNU.RData")
# For Final Presentation - to be deleted (please keep a copy!)
plots <- VlnPlot(SNU.integrated,
features = c("DCBLD2"),
split.by = "Treatment",
group.by = 'CellLine',
pt.size = 0,
combine = FALSE)
plots <- lapply(X = plots, FUN = function(x) x +
theme(axis.title = element_text(size=15),
axis.text.x = element_text(size=15,angle = 0, hjust = 0.5),
axis.text.y = element_text(size=15),
plot.title=element_text(size=20,face="bold"),
legend.position = 'top'))
CombinePlots(plots = plots, ncol = 1)
## Set working directory
setwd("/Users/serena/handover/results/analysis/pureDMSOvcoDMSO")
## Set working directory
setwd("/Users/serena/handover/results/analysis/pureDMSOvscoDMSO")
## Load the datasets: 2 SNU719-DMSO, 1 mixed_DMSO_labeled
load("/Users/serena/handover/results/dataset preparation/mono/april2017/SNU719-DMSO-april2017/SCT-SNU719-DMSO-april2017.RData")
load("/Users/serena/handover/results/dataset preparation/mono/july2017/SNU719-DMSO-july2017/SCT-SNU719-DMSO-july2017.RData")
load("/Users/serena/handover/results/cell line assignment/DMSO/coculture-DMSO-assigned.RData")
### Set Idents for SNU719.DMSO.april2017.seuratobject
Idents(SNU719.DMSO.april2017.seuratobject)<-SNU719.DMSO.april2017.seuratobject$CellLine
# CellLine.Treatment
SNU719.DMSO.april2017.seuratobject$CellLine.Treatment<- paste(Idents(SNU719.DMSO.april2017.seuratobject), SNU719.DMSO.april2017.seuratobject$Treatment, sep = "_")
# CellLine.Culture, CellLine.Treatment.Culture
SNU719.DMSO.april2017.seuratobject$CellLine.Culture <- "SNU719_Mono"
SNU719.DMSO.april2017.seuratobject$CellLine.Treatment.Culture <- "SNU719_DMSO_Mono"
# Set Idents
Idents(SNU719.DMSO.april2017.seuratobject) <-SNU719.DMSO.april2017.seuratobject$CellLine.Culture
table(Idents(SNU719.DMSO.april2017.seuratobject))
View(SNU719.DMSO.april2017.seuratobject)
table(SNU719.DMSO.april2017.seuratobject@meta.data[["CellLine.Treatment.Culture"]])
table(SNU719.DMSO.april2017.seuratobject@meta.data[["CellLine.Treatment"]])
# save
save(SNU719.DMSO.april2017.seuratobject, file = "/Users/serena/handover/results/dataset preparation/mono/april2017/SNU719-DMSO-april2017/SCT-SNU719-DMSO-april2017.RData")
### Set Idents for SNU719.DMSO.july2017.seuratobject
Idents(SNU719.DMSO.july2017.seuratobject)<-SNU719.DMSO.july2017.seuratobject$CellLine
# Add in Idents of CellLine.Treatment
SNU719.DMSO.july2017.seuratobject$CellLine.Treatment<- paste(Idents(SNU719.DMSO.july2017.seuratobject), SNU719.DMSO.july2017.seuratobject$Treatment, sep = "_")
# Add in Idents of CellLine.Culture
SNU719.DMSO.july2017.seuratobject$CellLine.Culture <- "SNU719_Mono"
SNU719.DMSO.july2017.seuratobject$CellLine.Treatment.Culture <- "SNU719_DMSO_Mono"
# Set Idents
Idents(SNU719.DMSO.july2017.seuratobject) <- SNU719.DMSO.july2017.seuratobject$CellLine.Culture
# save
save(SNU719.DMSO.july2017.seuratobject, file = "/Users/serena/handover/results/dataset preparation/mono/july2017/SNU719-DMSO-july2017/SCT-SNU719-DMSO-july2017.RData")
# Integrate datasets: SNU719 and coculture_DMSO--------------------------------------
coculture.SNU.DMSO.list <- list(SNU719.DMSO.april2017.seuratobject,SNU719.DMSO.july2017.seuratobject, coculture.DMSO.assigned)
# Integrate datasets: SNU719 and coculture_DMSO--------------------------------------
DMSO.list <- list(SNU719.DMSO.april2017.seuratobject,SNU719.DMSO.july2017.seuratobject, coculture.DMSO.assigned)
DMSO.features <- SelectIntegrationFeatures(object.list = DMSO.list, nfeatures = 3000)
DMSO.list <- PrepSCTIntegration(object.list = DMSO.list, anchor.features = DMSO.features)
DMSO.anchors <- FindIntegrationAnchors(object.list = DMSO.list, normalization.method = "SCT", anchor.features = DMSO.features)
DMSO.integrated <- IntegrateData(anchorset = DMSO.anchors, normalization.method = "SCT")
DefaultAssay(DMSO.integrated) <- "integrated"
# RunPCA Elbow Plot UMAP
DMSO.integrated <- RunPCA(DMSO.integrated, verbose = FALSE)
ElbowPlot(DMSO.integrated)
PCAPlot(DMSO.integrated,group.by = "sample")
DMSO.integrated <- RunUMAP(DMSO.integrated, reduction = "pca", dims = 1:15)
DimPlot(DMSO.integrated, reduction = "umap") + ggtitle("Integrated Mono and Co SNU719 DMSO Datasets")
DimPlot(DMSO.integrated, group.by = "CellLine.Culture",
cols = c('SNU719_Co' = 'tomato2', 'SNU719_Mono' = 'lightpink1',
'NCC24_Co' = "gray70",'1_Co' = "gray70",'2_Co' = "gray70",'4_Co' = "gray70",'5_Co' = "gray70",'6_Co' = "gray70",'7_Co' = "gray70")) +
ggtitle("Integrated Mono and Co SNU719 DMSO Datasets")
DimPlot(DMSO.integrated, group.by = "CellLine.Culture",
cols = c('SNU719_Co' = 'tomato2', 'SNU719_Mono' = 'lightpink1',
'NCC24_Co' = "gray70",'1_Co' = "gray70",'2_Co' = "gray70",'4_Co' = "gray70",'5_Co' = "gray70",'6_Co' = "gray70",'7_Co' = "gray70")) +
ggtitle("Integrated Mono and Co SNU719 DMSO Datasets")
Idents(DMSO.integrated) <- "CellLine"
DimPlot(DMSO.integrated, split.by = "Culture")
# Set-up SNU object for DE: Normalize, Set Idents, ScaleData  ----------------------------------------------------------
# Set assay to RNA
DefaultAssay(DMSO.integrated) <- "RNA"
# Normalize RNA data for visualization purposes
DMSO.integrated <- NormalizeData(DMSO.integrated, verbose = FALSE)
DMSO.integrated <- ScaleData(DMSO.integrated,
features = VariableFeatures(DMSO.integrated),
vars.to.regress = c('percent.mt', 'nFeature_RNA', 'nCount_RNA', 'S.Score', 'G2M.Score'))
# Save normalized, scaled object
save(DMSO.integrated, file="DMSO_integrated.RData")
View(DMSO.integrated)
#DE: SNU--------------------------------------
# Load annotations
annotations <- read.csv("/users/serena/scrnaseq/data/annotation.csv")
# Create new object to perform analysis on:
DMSO.integrated.new <- DMSO.integrated
Idents(DMSO.integrated.new)<-DMSO.integrated.new$CellLine.Culture
DefaultAssay(DMSO.integrated.new) <- "RNA"
# FindMarkers
DMSO.SNU719.Culture.response <- FindMarkers(DMSO.integrated.new, ident.1 = "SNU719_Co", ident.2 = "SNU719_Mono", verbose = TRUE, min.diff.pct = 0.3)
DMSO.SNU719.Culture.response <- DMSO.SNU719.Culture.response %>%
rownames_to_column(var="gene") %>%
left_join(y = unique(annotations[, c("gene_name", "description")]), by = c("gene" = "gene_name"))
# save list of de genes
write.csv(DMSO.SNU719.Culture.response,file = "DEG_pureDMSOvcoDMSO.csv")
save(DMSO.SNU719.Culture.response, file = "DEG_pureDMSOvcoDMSO.Rdata")
# Visualizing DE Genes  -----------------------------------------------------------
# List top 20 up reg and top 20 down reg
top20.DMSO.SNU719.Culture.markers <- (top_n(DMSO.SNU719.Culture.response, n = 20, wt = avg_logFC))$gene
top20.DMSO.SNU719.Culture.markers <- append(top20.DMSO.SNU719.Culture.markers, (top_n(DMSO.SNU719.Culture.response, n = 20, wt = -avg_logFC))$gene)
# Create object of just SNU719_Mono and SNU719_Culture cells
DMSO.SNU719.Cells <- subset(DMSO.integrated.new, idents = c("SNU719_Mono", "SNU719_Co"))
# Plot Heatmap of these genes
DefaultAssay(DMSO.SNU719.Cells) <- "RNA"
DoHeatmap(DMSO.SNU719.Cells, group.by = "CellLine.Culture",features = top20.DMSO.SNU719.Culture.markers,
group.bar = TRUE, draw.lines = TRUE, size = 4, hjust = 0.5, angle = 0) +
scale_fill_distiller(palette = "RdBu")
View(DMSO.anchors)
# plot heatmap of top 20 for each treatment
DoHeatmap(coculture.SNU719, group.by = "CellLine.Treatment",features = top20.coculture.SNU719.Treatment.markers,
group.bar = TRUE, draw.lines = TRUE, size = 4, hjust = 0.5, angle = 0) +
scale_fill_distiller(palette = "RdBu")
# replot absolute values
DoHeatmap(coculture.SNU719, features = top20.coculture.SNU719.Treatment.markers$gene,
group.bar = TRUE, size = 4, hjust = 1, angle = 0,
slot = "counts") +
scale_fill_distiller(palette = "RdBu") +
NoLegend()
# replot absolute values
DoHeatmap(coculture.SNU719, features = top20.coculture.SNU719.Treatment.markers,
group.bar = TRUE, size = 4, hjust = 1, angle = 0,
slot = "counts") +
scale_fill_distiller(palette = "RdBu") +
NoLegend()
load("/Users/serena/handover/results/analysis/coDMSOvscoAza/DEG_coDvcoA.Rdata")
View(coculture.SNU719)
# replot absolute values
DoHeatmap(coculture.SNU719, features = top20.coculture.SNU719.Treatment.markers,
group.bar = TRUE, size = 4, hjust = 1, angle = 0,
slot = "counts") +
scale_fill_distiller(palette = "RdBu") +
NoLegend()
# plot heatmap of top 20 for each treatment
DoHeatmap(coculture.SNU719, group.by = "CellLine.Treatment",features = top20.coculture.SNU719.Treatment.markers,
group.bar = TRUE, draw.lines = TRUE, size = 4, hjust = 0.5, angle = 0) +
scale_fill_distiller(palette = "RdBu")
# plot heatmap of top 20 for each treatment
DoHeatmap(coculture.SNU719, group.by = "CellLine.Treatment",features = top20.coculture.SNU719.Treatment.markers,
group.bar = TRUE, draw.lines = TRUE, size = 4, hjust = 0.5, angle = 0) +
scale_fill_distiller(palette = "RdBu")
# Feature Plot of selected genes across treatment condition
# modify genes under 'features'
# modify object to be plotted as desired
FeaturePlot(coculture.SNU719, features = c("IFI27","IFI6"," LGALS1","RPL17"),
split.by = "Treatment", max.cutoff = 3, cols = c("grey", "red"))
# Feature Plot of selected genes across treatment condition
# modify genes under 'features'
# moddify object to be plotted as desiredzw
FeaturePlot(DMSO.SNU719.Cells, features = c("CDKN2A","ID2","IGFBP3"),
split.by = "Treatment", max.cutoff = 3, cols = c("grey", "red"))
